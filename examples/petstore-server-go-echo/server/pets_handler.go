// Code generated by goapi. DO NOT EDIT.
package server

import (
	"strings"

	"github.com/go-playground/validator/v10"
	"github.com/labstack/echo/v4"
)

// Interface for Pets route endpoints
type PetsEndpoints interface {
	ListPets(c echo.Context, query *ListPetsQuery) (*Pets, error)
	CreatePets(c echo.Context, body *Pet) error
	ShowPetByID(c echo.Context, petID string) (*Pet, error)
}

// Wrapper to expose PetsEndpoints functions as echo handlers/middleware
type PetsRouteHandlers struct {
	validate *validator.Validate
	wrapper  PetsEndpoints
}

func NewPetsRouteHandlers(wrapper PetsEndpoints) *PetsRouteHandlers {
	return &PetsRouteHandlers{
		validate: validator.New(validator.WithRequiredStructEnabled()),
		wrapper:  wrapper,
	}
}

//------------------------------------------------------------------------------
// # listPets: List all pets
//
// GET:/pets
//
// ## Parameters
//
// - description: How many items to return at one time (max 100)
//   in: query
//   name: limit
//   schema:
//     format: int32
//     maximum: 100
//     type: integer
//
// ## Responses
//
// "200":
//     content:
//         application/json:
//             schema:
//                 $ref: '#/components/schemas/Pets'
//     description: A paged array of pets
//     headers:
//         x-next:
//             description: A link to the next page of responses
//             schema:
//                 type: string
// default:
//     content:
//         application/json:
//             schema:
//                 $ref: '#/components/schemas/Error'
//     description: unexpected error
//------------------------------------------------------------------------------

// Validate requests to GET:/pets
func (r *PetsRouteHandlers) ListPetsValidator(next echo.HandlerFunc) echo.HandlerFunc {
	return func(c echo.Context) error {
		// Query: ListPetsQuery
		query := &ListPetsQuery{}
		if err := (&echo.DefaultBinder{}).BindQueryParams(c, query); err != nil {
			return err
		} else if err := r.validate.Struct(*query); err != nil {
			return err
		}

		c.Set("query", query)
		return next(c)
	}
}

// Handle requests to GET:/pets
func (r *PetsRouteHandlers) ListPetsHandler(c echo.Context) error {
	query := c.Get("query").(*ListPetsQuery)

	if res, err := r.wrapper.ListPets(c, query); err == nil {
		if !c.Response().Committed {
			return c.JSON(200, res)
		} else {
			return nil
		}
	} else {
		return err
	}
}

// Get path for GET:/pets
func (r *PetsRouteHandlers) ListPetsPath(trimPrefix ...string) string {
	if len(trimPrefix) > 0 {
		return strings.TrimPrefix("/pets", trimPrefix[0])
	}
	return "/pets"
}

// Register the handler and middleware for GET:/pets at the default path
func (r *PetsRouteHandlers) RegisterListPetsRoute(e EchoLike, m ...echo.MiddlewareFunc) *echo.Route {
	return r.RegisterListPetsRouteAt(r.ListPetsPath(), e, m...)
}

// Register the handler and middleware for GET:/pets at a custom path
func (r *PetsRouteHandlers) RegisterListPetsRouteAt(path string, e EchoLike, m ...echo.MiddlewareFunc) *echo.Route {
	mw := append([]echo.MiddlewareFunc{r.ListPetsValidator}, m...)
	return e.GET(path, r.ListPetsHandler, mw...)
}

//------------------------------------------------------------------------------
// # createPets: Create a pet
//
// POST:/pets
//
// ## Request Body
//
// content:
//     application/json:
//         schema:
//             $ref: '#/components/schemas/Pet'
// required: true
//
// ## Responses
//
// "201":
//     description: Null response
// default:
//     content:
//         application/json:
//             schema:
//                 $ref: '#/components/schemas/Error'
//     description: unexpected error
//------------------------------------------------------------------------------

// Validate requests to POST:/pets
func (r *PetsRouteHandlers) CreatePetsValidator(next echo.HandlerFunc) echo.HandlerFunc {
	return func(c echo.Context) error {
		// Body: Pet
		body := &Pet{}
		if err := (&echo.DefaultBinder{}).BindBody(c, body); err != nil {
			return err
		} else if err := r.validate.Struct(*body); err != nil {
			return err
		}

		c.Set("body", body)
		return next(c)
	}
}

// Handle requests to POST:/pets
func (r *PetsRouteHandlers) CreatePetsHandler(c echo.Context) error {
	body := c.Get("body").(*Pet)

	if err := r.wrapper.CreatePets(c, body); err == nil {
		if !c.Response().Committed {
			return c.NoContent(201)
		} else {
			return nil
		}
	} else {
		return err
	}
}

// Get path for POST:/pets
func (r *PetsRouteHandlers) CreatePetsPath(trimPrefix ...string) string {
	if len(trimPrefix) > 0 {
		return strings.TrimPrefix("/pets", trimPrefix[0])
	}
	return "/pets"
}

// Register the handler and middleware for POST:/pets at the default path
func (r *PetsRouteHandlers) RegisterCreatePetsRoute(e EchoLike, m ...echo.MiddlewareFunc) *echo.Route {
	return r.RegisterCreatePetsRouteAt(r.CreatePetsPath(), e, m...)
}

// Register the handler and middleware for POST:/pets at a custom path
func (r *PetsRouteHandlers) RegisterCreatePetsRouteAt(path string, e EchoLike, m ...echo.MiddlewareFunc) *echo.Route {
	mw := append([]echo.MiddlewareFunc{r.CreatePetsValidator}, m...)
	return e.POST(path, r.CreatePetsHandler, mw...)
}

//------------------------------------------------------------------------------
// # showPetById: Info for a specific pet
//
// GET:/pets/:petId
//
// ## Parameters
//
// - description: The id of the pet to retrieve
//   in: path
//   name: petId
//   required: true
//   schema:
//     maxLength: 1
//     type: string
//
// ## Responses
//
// "200":
//     content:
//         application/json:
//             schema:
//                 $ref: '#/components/schemas/Pet'
//     description: Expected response to a valid request
// default:
//     content:
//         application/json:
//             schema:
//                 $ref: '#/components/schemas/Error'
//     description: unexpected error
//------------------------------------------------------------------------------

// Validate requests to GET:/pets/:petId
func (r *PetsRouteHandlers) ShowPetByIDValidator(next echo.HandlerFunc) echo.HandlerFunc {
	return func(c echo.Context) error {
		// Path Parameter: petId
		petID := c.Param("petId")
		if err := r.validate.Var(petID, "required,max=1"); err != nil {
			return err
		}

		c.Set("param.petId", petID)

		return next(c)
	}
}

// Handle requests to GET:/pets/:petId
func (r *PetsRouteHandlers) ShowPetByIDHandler(c echo.Context) error {
	petID := c.Get("param.petId").(string)

	if res, err := r.wrapper.ShowPetByID(c, petID); err == nil {
		if !c.Response().Committed {
			return c.JSON(200, res)
		} else {
			return nil
		}
	} else {
		return err
	}
}

// Get path for GET:/pets/:petId
func (r *PetsRouteHandlers) ShowPetByIDPath(trimPrefix ...string) string {
	if len(trimPrefix) > 0 {
		return strings.TrimPrefix("/pets/:petId", trimPrefix[0])
	}
	return "/pets/:petId"
}

// Register the handler and middleware for GET:/pets/:petId at the default path
func (r *PetsRouteHandlers) RegisterShowPetByIDRoute(e EchoLike, m ...echo.MiddlewareFunc) *echo.Route {
	return r.RegisterShowPetByIDRouteAt(r.ShowPetByIDPath(), e, m...)
}

// Register the handler and middleware for GET:/pets/:petId at a custom path
func (r *PetsRouteHandlers) RegisterShowPetByIDRouteAt(path string, e EchoLike, m ...echo.MiddlewareFunc) *echo.Route {
	mw := append([]echo.MiddlewareFunc{r.ShowPetByIDValidator}, m...)
	return e.GET(path, r.ShowPetByIDHandler, mw...)
}
