// Code generated by goapi. DO NOT EDIT.
package server

import (
	"net/http"
	"strings"

	"github.com/go-playground/validator/v10"
	"github.com/labstack/echo/v4"
)

// Interface for Store route endpoints
type StoreEndpoints interface {

	// Returns a map of status codes to quantities
	GetInventory(c echo.Context) (*GetInventoryJSON200Response, error)

	// Place a new order in the store
	PlaceOrder(c echo.Context, body *Order) (*Order, error)

	// For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors
	DeleteOrder(c echo.Context, orderID string) error

	// For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.
	GetOrderByID(c echo.Context, orderID string) (*Order, error)
}

// Wrapper to expose StoreEndpoints functions as echo handlers/middleware
type StoreRouteHandlers struct {
	validate *validator.Validate
	wrapper  StoreEndpoints
}

func NewStoreRouteHandlers(wrapper StoreEndpoints) *StoreRouteHandlers {
	return &StoreRouteHandlers{
		validate: validator.New(validator.WithRequiredStructEnabled()),
		wrapper:  wrapper,
	}
}

//------------------------------------------------------------------------------
// # getInventory: Returns pet inventories by status
//
// GET:/store/inventory
//
// Returns a map of status codes to quantities
//
// ## Responses
//
// "200":
//     content:
//         application/json:
//             schema:
//                 $ref: '#/components/schemas/GetInventoryJSON200Response'
//     description: successful operation
//------------------------------------------------------------------------------

// Validate requests to GET:/store/inventory
func (r *StoreRouteHandlers) GetInventoryValidator(next echo.HandlerFunc) echo.HandlerFunc {
	return func(c echo.Context) error {
		return next(c)
	}
}

// Handle requests to GET:/store/inventory
func (r *StoreRouteHandlers) GetInventoryHandler(c echo.Context) error {

	if res, err := r.wrapper.GetInventory(c); err == nil {
		if !c.Response().Committed {
			return c.JSON(200, res)
		} else {
			return nil
		}
	} else {
		return err
	}
}

// Get path for GET:/store/inventory
func (r *StoreRouteHandlers) GetInventoryPath(trimPrefix ...string) string {
	if len(trimPrefix) > 0 {
		return strings.TrimPrefix("/store/inventory", trimPrefix[0])
	}
	return "/store/inventory"
}

// Register the handler and middleware for GET:/store/inventory at the default path
func (r *StoreRouteHandlers) RegisterGetInventoryRoute(e EchoLike, m ...echo.MiddlewareFunc) *echo.Route {
	return r.RegisterGetInventoryRouteAt(r.GetInventoryPath(), e, m...)
}

// Register the handler and middleware for GET:/store/inventory at a custom path
func (r *StoreRouteHandlers) RegisterGetInventoryRouteAt(path string, e EchoLike, m ...echo.MiddlewareFunc) *echo.Route {
	mw := append([]echo.MiddlewareFunc{r.GetInventoryValidator}, m...)
	return e.GET(path, r.GetInventoryHandler, mw...)
}

//------------------------------------------------------------------------------
// # placeOrder: Place an order for a pet
//
// POST:/store/order
//
// Place a new order in the store
//
// ## Request Body
//
// content:
//     application/json:
//         schema:
//             $ref: '#/components/schemas/Order'
//     application/x-www-form-urlencoded:
//         schema:
//             $ref: '#/components/schemas/Order'
//     application/xml:
//         schema:
//             $ref: '#/components/schemas/Order'
//
// ## Responses
//
// "200":
//     content:
//         application/json:
//             schema:
//                 $ref: '#/components/schemas/Order'
//     description: successful operation
// "405":
//     description: Invalid input
//------------------------------------------------------------------------------

// Validate requests to POST:/store/order
func (r *StoreRouteHandlers) PlaceOrderValidator(next echo.HandlerFunc) echo.HandlerFunc {
	return func(c echo.Context) error {
		// Body: Order
		body := &Order{}
		if err := (&echo.DefaultBinder{}).BindBody(c, body); err != nil {
			return err
		} else if err := r.validate.Struct(*body); err != nil {
			return err
		}

		c.Set("body", body)
		return next(c)
	}
}

// Handle requests to POST:/store/order
func (r *StoreRouteHandlers) PlaceOrderHandler(c echo.Context) error {
	body := c.Get("body").(*Order)

	if res, err := r.wrapper.PlaceOrder(c, body); err == nil {
		if !c.Response().Committed {
			return c.JSON(200, res)
		} else {
			return nil
		}
	} else {
		return err
	}
}

// Get path for POST:/store/order
func (r *StoreRouteHandlers) PlaceOrderPath(trimPrefix ...string) string {
	if len(trimPrefix) > 0 {
		return strings.TrimPrefix("/store/order", trimPrefix[0])
	}
	return "/store/order"
}

// Register the handler and middleware for POST:/store/order at the default path
func (r *StoreRouteHandlers) RegisterPlaceOrderRoute(e EchoLike, m ...echo.MiddlewareFunc) *echo.Route {
	return r.RegisterPlaceOrderRouteAt(r.PlaceOrderPath(), e, m...)
}

// Register the handler and middleware for POST:/store/order at a custom path
func (r *StoreRouteHandlers) RegisterPlaceOrderRouteAt(path string, e EchoLike, m ...echo.MiddlewareFunc) *echo.Route {
	mw := append([]echo.MiddlewareFunc{r.PlaceOrderValidator}, m...)
	return e.POST(path, r.PlaceOrderHandler, mw...)
}

//------------------------------------------------------------------------------
// # deleteOrder: Delete purchase order by ID
//
// DELETE:/store/order/:orderId
//
// For valid response try integer IDs with value < 1000. Anything above 1000 or
// nonintegers will generate API errors
//
// ## Parameters
//
// - description: ID of the order that needs to be deleted
//   in: path
//   name: orderId
//   required: true
//   schema:
//     format: int64
//     type: integer
//
// ## Responses
//
// "400":
//     description: Invalid ID supplied
// "404":
//     description: Order not found
//------------------------------------------------------------------------------

// Validate requests to DELETE:/store/order/:orderId
func (r *StoreRouteHandlers) DeleteOrderValidator(next echo.HandlerFunc) echo.HandlerFunc {
	return func(c echo.Context) error {
		// Path Parameter: orderId
		orderID := c.Param("orderId")
		if err := r.validate.Var(orderID, "required"); err != nil {
			return err
		}

		c.Set("param.order_id", orderID)

		return next(c)
	}
}

// Handle requests to DELETE:/store/order/:orderId
func (r *StoreRouteHandlers) DeleteOrderHandler(c echo.Context) error {
	orderID := c.Get("param.order_id").(string)

	if err := r.wrapper.DeleteOrder(c, orderID); err == nil {
		if !c.Response().Committed {
			return c.NoContent(http.StatusNoContent)
		} else {
			return nil
		}
	} else {
		return err
	}
}

// Get path for DELETE:/store/order/:orderId
func (r *StoreRouteHandlers) DeleteOrderPath(trimPrefix ...string) string {
	if len(trimPrefix) > 0 {
		return strings.TrimPrefix("/store/order/:orderId", trimPrefix[0])
	}
	return "/store/order/:orderId"
}

// Register the handler and middleware for DELETE:/store/order/:orderId at the default path
func (r *StoreRouteHandlers) RegisterDeleteOrderRoute(e EchoLike, m ...echo.MiddlewareFunc) *echo.Route {
	return r.RegisterDeleteOrderRouteAt(r.DeleteOrderPath(), e, m...)
}

// Register the handler and middleware for DELETE:/store/order/:orderId at a custom path
func (r *StoreRouteHandlers) RegisterDeleteOrderRouteAt(path string, e EchoLike, m ...echo.MiddlewareFunc) *echo.Route {
	mw := append([]echo.MiddlewareFunc{r.DeleteOrderValidator}, m...)
	return e.DELETE(path, r.DeleteOrderHandler, mw...)
}

//------------------------------------------------------------------------------
// # getOrderById: Find purchase order by ID
//
// GET:/store/order/:orderId
//
// For valid response try integer IDs with value <= 5 or > 10. Other values will
// generate exceptions.
//
// ## Parameters
//
// - description: ID of order that needs to be fetched
//   in: path
//   name: orderId
//   required: true
//   schema:
//     format: int64
//     type: integer
//
// ## Responses
//
// "200":
//     content:
//         application/json:
//             schema:
//                 $ref: '#/components/schemas/Order'
//         application/xml:
//             schema:
//                 $ref: '#/components/schemas/Order'
//     description: successful operation
// "400":
//     description: Invalid ID supplied
// "404":
//     description: Order not found
//------------------------------------------------------------------------------

// Validate requests to GET:/store/order/:orderId
func (r *StoreRouteHandlers) GetOrderByIDValidator(next echo.HandlerFunc) echo.HandlerFunc {
	return func(c echo.Context) error {
		// Path Parameter: orderId
		orderID := c.Param("orderId")
		if err := r.validate.Var(orderID, "required"); err != nil {
			return err
		}

		c.Set("param.order_id", orderID)

		return next(c)
	}
}

// Handle requests to GET:/store/order/:orderId
func (r *StoreRouteHandlers) GetOrderByIDHandler(c echo.Context) error {
	orderID := c.Get("param.order_id").(string)

	if res, err := r.wrapper.GetOrderByID(c, orderID); err == nil {
		if !c.Response().Committed {
			return c.JSON(200, res)
		} else {
			return nil
		}
	} else {
		return err
	}
}

// Get path for GET:/store/order/:orderId
func (r *StoreRouteHandlers) GetOrderByIDPath(trimPrefix ...string) string {
	if len(trimPrefix) > 0 {
		return strings.TrimPrefix("/store/order/:orderId", trimPrefix[0])
	}
	return "/store/order/:orderId"
}

// Register the handler and middleware for GET:/store/order/:orderId at the default path
func (r *StoreRouteHandlers) RegisterGetOrderByIDRoute(e EchoLike, m ...echo.MiddlewareFunc) *echo.Route {
	return r.RegisterGetOrderByIDRouteAt(r.GetOrderByIDPath(), e, m...)
}

// Register the handler and middleware for GET:/store/order/:orderId at a custom path
func (r *StoreRouteHandlers) RegisterGetOrderByIDRouteAt(path string, e EchoLike, m ...echo.MiddlewareFunc) *echo.Route {
	mw := append([]echo.MiddlewareFunc{r.GetOrderByIDValidator}, m...)
	return e.GET(path, r.GetOrderByIDHandler, mw...)
}
