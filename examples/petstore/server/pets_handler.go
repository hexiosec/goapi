// Code generated by goapi. DO NOT EDIT.
package server

import (
	"github.com/go-playground/validator/v10"
	"github.com/labstack/echo/v4"
)

type PetsPath string

const (
	ListPetsPath    PetsPath = "/pets"
	CreatePetsPath  PetsPath = "/pets"
	ShowPetByIDPath PetsPath = "/pets/:petId"
)

// Interface for Pets route endpoints
type PetsEndpoints interface {
	ListPets(c echo.Context, query *ListPetsQuery) (*Pets, error)
	CreatePets(c echo.Context, body *Pet) error
	ShowPetByID(c echo.Context, petID string) (*Pet, error)
}

// Wrapper to expose PetsEndpoints functions as echo handlers/middleware
type PetsRouteHandlers struct {
	validate *validator.Validate
	wrapper  PetsEndpoints
}

func NewPetsRouteHandlers(wrapper PetsEndpoints) *PetsRouteHandlers {
	return &PetsRouteHandlers{
		validate: validator.New(validator.WithRequiredStructEnabled()),
		wrapper:  wrapper,
	}
}

// Validate requests to GET:/pets
func (r *PetsRouteHandlers) ListPetsValidator(next echo.HandlerFunc) echo.HandlerFunc {
	return func(c echo.Context) error {
		// Query: ListPetsQuery
		query := &ListPetsQuery{}
		if err := (&echo.DefaultBinder{}).BindQueryParams(c, &query); err != nil {
			return err
		} else if err := r.validate.Struct(query); err != nil {
			return err
		}

		c.Set("query", query)
		return next(c)
	}
}

// Handle requests to GET:/pets
func (r *PetsRouteHandlers) ListPetsHandler(c echo.Context) error {
	query := c.Get("query").(*ListPetsQuery)

	if res, err := r.wrapper.ListPets(c, query); err == nil {
		return c.JSON(200, res)
	} else {
		return err
	}
}

// Register the handler and middleware for GET:/pets at the default path
func (r *PetsRouteHandlers) RegisterListPetsRoute(e EchoLike, m ...echo.MiddlewareFunc) *echo.Route {
	return r.RegisterListPetsRouteAt(e, string(ListPetsPath), m...)
}

// Register the handler and middleware for GET:/pets at a custom path
func (r *PetsRouteHandlers) RegisterListPetsRouteAt(e EchoLike, path string, m ...echo.MiddlewareFunc) *echo.Route {
	mw := append([]echo.MiddlewareFunc{r.ListPetsValidator}, m...)
	return e.GET(path, r.ListPetsHandler, mw...)
}

// Validate requests to POST:/pets
func (r *PetsRouteHandlers) CreatePetsValidator(next echo.HandlerFunc) echo.HandlerFunc {
	return func(c echo.Context) error {
		// Body: Pet, Required: true
		body := &Pet{}
		if err := (&echo.DefaultBinder{}).BindBody(c, &body); err != nil {
			return err
		} else if err := r.validate.Struct(body); err != nil {
			return err
		}

		c.Set("body", body)
		return next(c)
	}
}

// Handle requests to POST:/pets
func (r *PetsRouteHandlers) CreatePetsHandler(c echo.Context) error {
	body := c.Get("body").(*Pet)

	if err := r.wrapper.CreatePets(c, body); err == nil {
		return c.NoContent(201)
	} else {
		return err
	}
}

// Register the handler and middleware for POST:/pets at the default path
func (r *PetsRouteHandlers) RegisterCreatePetsRoute(e EchoLike, m ...echo.MiddlewareFunc) *echo.Route {
	return r.RegisterCreatePetsRouteAt(e, string(CreatePetsPath), m...)
}

// Register the handler and middleware for POST:/pets at a custom path
func (r *PetsRouteHandlers) RegisterCreatePetsRouteAt(e EchoLike, path string, m ...echo.MiddlewareFunc) *echo.Route {
	mw := append([]echo.MiddlewareFunc{r.CreatePetsValidator}, m...)
	return e.POST(path, r.CreatePetsHandler, mw...)
}

// Validate requests to GET:/pets/:petId
func (r *PetsRouteHandlers) ShowPetByIDValidator(next echo.HandlerFunc) echo.HandlerFunc {
	return func(c echo.Context) error {
		// Path Parameter: petId
		petID := c.Param("petId")
		if err := r.validate.Var(petID, "required"); err != nil {
			return err
		}

		c.Set("param.petId", petID)

		return next(c)
	}
}

// Handle requests to GET:/pets/:petId
func (r *PetsRouteHandlers) ShowPetByIDHandler(c echo.Context) error {
	petID := c.Get("param.petId").(string)

	if res, err := r.wrapper.ShowPetByID(c, petID); err == nil {
		return c.JSON(200, res)
	} else {
		return err
	}
}

// Register the handler and middleware for GET:/pets/:petId at the default path
func (r *PetsRouteHandlers) RegisterShowPetByIDRoute(e EchoLike, m ...echo.MiddlewareFunc) *echo.Route {
	return r.RegisterShowPetByIDRouteAt(e, string(ShowPetByIDPath), m...)
}

// Register the handler and middleware for GET:/pets/:petId at a custom path
func (r *PetsRouteHandlers) RegisterShowPetByIDRouteAt(e EchoLike, path string, m ...echo.MiddlewareFunc) *echo.Route {
	mw := append([]echo.MiddlewareFunc{r.ShowPetByIDValidator}, m...)
	return e.GET(path, r.ShowPetByIDHandler, mw...)
}
