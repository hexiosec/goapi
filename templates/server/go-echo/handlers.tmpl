{{ define "handlers-go" }}
{{ $tag := .Node.Name | toGoPascalCase }}
// Code generated by goapi. DO NOT EDIT.
{{ include "package" . }}

import (
  "regexp"

  "github.com/labstack/echo/v4"
)

type {{ $tag }}Path string

const (
  {{- range $path, $pathObj := .Doc.Paths }}
  {{- range $method, $op := $pathObj.AsMap }}
  {{- if eq (index $op.Tags 0) $.Node.Name }}
  {{ include "operation-path-name" $op }} {{ $tag }}Path = {{ include "echo-path" $path | quote }}
  {{- end }}
  {{- end }}
  {{- end }}
)

// Interface for {{ $tag }} route endpoints
type {{ $tag }}Endpoints interface {
  {{- range $path, $pathObj := .Doc.Paths }}
  {{- range $method, $op := $pathObj.AsMap }}
  {{- if eq (index $op.Tags 0) $.Node.Name }}
  {{ include "operation-wrapper-name" $op }}({{ include "operation-args" $op }}) error
  {{- end }}
  {{- end }}
  {{- end }}
}

// Wrapper to expose {{ $tag }}Endpoints functions as echo handlers/middleware
type {{ $tag }}RouteHandlers struct {
  wrapper {{ $tag }}Endpoints
}
{{- range $path, $pathObj := .Doc.Paths }}
{{- range $method, $op := $pathObj.AsMap }}
{{- if eq (index $op.Tags 0) $.Node.Name }}
{{- $handler := include "operation-handler-name" $op }}
{{- $middleware := include "operation-middleware-name" $op }}
{{- $wrapper := include "operation-wrapper-name" $op }}

// Validate requests to {{ $method | upper }}:{{ include "echo-path" $path }}
func (r *{{ $tag }}RouteHandlers) {{ $middleware }}(next echo.HandlerFunc) echo.HandlerFunc {
  return func(c echo.Context) error {
    {{- range $op.Parameters }}
    {{- if eq .Value.In "path" }}
    {{- $field := .Value.Name }}
    // Path Parameter: {{ .Value.Name }}
    {{- $var := include "param-arg-name" . }}
    {{ $var }} := c.Param({{ .Value.Name | quote}})
    {{- with .Value.Schema.Value }}
    {{- with .MinLength }}

    if len({{ $var }}) < {{ . }} {
      return &ValidationError{"min_length", "parameter", {{ $field | quote }}, nil}
    }
    {{- end }}
    {{- with .MaxLength }}

    if len({{ $var }}) > {{ . }} {
      return &ValidationError{"max_length", "parameter", {{ $field | quote }}, nil}
    }
    {{- end }}
    {{- with .Pattern }}

    if res, _ := regexp.MatchString(`{{ . }}`, {{ $var }}); !res  {
      return &ValidationError{"pattern", "parameter", {{ $field | quote }}, nil}
    }
    {{- end }}
    {{- end }}

    c.Set("param.{{ .Value.Name }}", {{ $var }})
    {{ end }}
    {{- end }}
    return next(c)
  }
}

// Handle requests to {{ $method | upper }}:{{ include "echo-path" $path }}
func (r *{{ $tag }}RouteHandlers) {{ $handler }}(c echo.Context) error {
  {{- $args := list "c" }}
  {{- range $op.Parameters }}
  {{- if eq .Value.In "path" }}
  {{- $var := include "param-arg-name" . }}
  // Path Parameter: {{ .Value.Name }}
  {{ $var }} := c.Get("param.{{ .Value.Name }}").(string)
  {{- $args = append $args $var }}
  {{ end }}
  {{- end }}
  return r.wrapper.{{ $wrapper }}({{ $args | join ", " }})
}

// Register the handler and middleware for {{ $method | upper }}:{{ include "echo-path" $path }} at the default path
func (r *{{ $tag }}RouteHandlers) Register{{ $wrapper }}Route(e EchoLike, m ...echo.MiddlewareFunc) *echo.Route {
  return r.Register{{ $wrapper }}RouteAt(e, string({{ include "operation-path-name" $op }}), m...)
}

// Register the handler and middleware for {{ $method | upper }}:{{ include "echo-path" $path }} at a custom path
func (r *{{ $tag }}RouteHandlers) Register{{ $wrapper }}RouteAt(e EchoLike, path string, m ...echo.MiddlewareFunc) *echo.Route {
  mw := append([]echo.MiddlewareFunc{r.{{ $middleware }}}, m...)
  return e.{{ $method | upper }}(path, r.{{ $handler }}, mw...)
}

{{- end }}
{{- end }}
{{- end }}
{{- end }}
