{{ define "operation-validate-path-param" }}
{{- $field := .Value.Name }}
// Path Parameter: {{ .Value.Name }}
{{- $var := include "param-arg-name" . }}
{{ $var }} := c.Param({{ .Value.Name | quote }})
{{- with .Value.Schema.Value }}
{{- $rules := list "required" }}
{{- if .MinLength }}
{{- $rule := list "min=" (.MinLength | deref) | join "" }}
{{- $rules = append $rules $rule }}
{{- end }}
{{- if .MaxLength }}
{{- $rule := list "max=" (.MaxLength | deref) | join "" }}
{{- $rules = append $rules $rule }}
{{- end }}
{{- with .Pattern }}
{{- warnf "Pattern validation not supported for path parameter %s" (list $field) }}
{{- end }}
if err := r.validate.Var({{ $var }}, {{ $rules | join "," | quote }}); err != nil {
  return err
}
{{- end }}

c.Set("param.{{ .Value.Name | toSnakeCase }}", {{ $var }})
{{- end }}


{{ define "operation-validate-cookie-param" }}
{{- $field := .Value.Name }}
// Cookie Parameter: {{ .Value.Name }}
{{- $var := include "param-arg-name" . }}
{{ $var }} := ""
if cookie, err := c.Cookie({{ .Value.Name | quote }}); err == nil {
  {{ $var }} = cookie.Value
}
{{- with .Value.Schema.Value }}
{{- $rules := list }}
{{- with .Required }}
{{- $rules = append $rules "required" }}
{{- else }}
{{- $rules = append $rules "omitempty" }}
{{- end }}
{{- if .MinLength }}
{{- $rule := list "min=" (.MinLength | deref) | join "" }}
{{- $rules = append $rules $rule }}
{{- end }}
{{- if .MaxLength }}
{{- $rule := list "max=" (.MaxLength | deref) | join "" }}
{{- $rules = append $rules $rule }}
{{- end }}
{{- with .Pattern }}
{{- warnf "Pattern validation not supported for header parameter %s" (list $field) }}
{{- end }}
if err := r.validate.Var({{ $var }}, {{ $rules | join "," | quote }}); err != nil {
  return err
}
{{- end }}

c.Set("param.{{ .Value.Name | toSnakeCase }}", {{ $var }})
{{- end }}


{{ define "operation-validate-header-param" }}
{{- $field := .Value.Name }}
// Header Parameter: {{ .Value.Name }}
{{- $var := include "param-arg-name" . }}
{{ $var }} := c.Request().Header.Get({{ .Value.Name | quote }})
{{- $rules := list }}
{{- with .Value.Required }}
{{- $rules = append $rules "required" }}
{{- else }}
{{- $rules = append $rules "omitempty" }}
{{- end }}
{{- with .Value.Schema.Value }}
{{- if .MinLength }}
{{- $rule := list "min=" (.MinLength | deref) | join "" }}
{{- $rules = append $rules $rule }}
{{- end }}
{{- if .MaxLength }}
{{- $rule := list "max=" (.MaxLength | deref) | join "" }}
{{- $rules = append $rules $rule }}
{{- end }}
{{- with .Pattern }}
{{- warnf "Pattern validation not supported for header parameter %s" (list $field) }}
{{- end }}
if err := r.validate.Var({{ $var }}, {{ $rules | join "," | quote }}); err != nil {
  return err
}
{{- end }}

c.Set("param.{{ .Value.Name | toSnakeCase}}", {{ $var }})
{{- end }}


{{ define "operation-validate-request-body" }}
{{- $reqd := get .Extensions "x-request-body-required" }}
{{- with get .Extensions "x-request-body-type" }}
// Body: {{ . }}
body := &{{ . }}{}
if err := (&echo.DefaultBinder{}).BindBody(c, body); err != nil {
  return err
} else if err := r.validate.Struct(*body); err != nil {
  return err
}

c.Set("body", body)
{{- end }}
{{- end }}


{{ define "operation-validate-request-query" }}
{{- with get .Extensions "x-goapi-query-object" }}
// Query: {{ . }}
query := &{{ . }}{}
if err := (&echo.DefaultBinder{}).BindQueryParams(c, query); err != nil {
  return err
} else if err := r.validate.Struct(*query); err != nil {
  return err
}

c.Set("query", query)
{{- end }}
{{- end }}
