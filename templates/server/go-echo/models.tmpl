{{ define "models-go" }}
// Code generated by goapi. DO NOT EDIT.
{{ include "package" . }}

{{- range $key, $schema := .Doc.Components.Schemas }}
// #/components/schemas/{{ $key }}
type {{ $key }} {{ include "schema-type" (dict "schema" $schema "required" true) }}
{{- end }}
{{- end }}


{{ define "schema-type" }}
{{- $schema := get . "schema" }}
{{- $reqd := get . "required" }}
{{- $tag := get . "tag" }}
{{- if eq $schema.Type "string" }}{{ include "string-type" (dict "schema" $schema "required" $reqd) }}
{{- else if eq $schema.Type "integer" }}{{ include "integer-type" (dict "schema" $schema "required" $reqd) }}
{{- else if eq $schema.Type "number" }}{{ include "number-type" (dict "schema" $schema "required" $reqd) }}
{{- else if eq $schema.Type "boolean" }}{{ include "boolean-type" (dict "schema" $schema) }}
{{- else if eq $schema.Type "object" }}{{ include "object-type" (dict "schema" $schema "required" $reqd) }}
{{- else if eq $schema.Type "array" }}{{ include "array-type" (dict "schema" $schema) }}
{{- else }}any
{{- end }}
{{- end }}


{{ define "object-type" }}
{{- $schema := get . "schema" }}
{{- $reqd := get . "required" }}
{{- $required := $schema.Required }}
{{- with $schema.Properties }}
{{- if not $reqd }}*{{ end }}struct {
  {{- range $key, $item := . }}
  {{- $childReqd := has $key $required }}
  {{- $tags := list }}
  {{- if eq "query" (get $schema.Extensions "x-goapi-binding") }}
  {{- $tags = append $tags (include "query-tag" (dict "key" $key)) }}
  {{- else }}
  {{- $tags = append $tags (include "json-tag" (dict "key" $key "required" $childReqd)) }}
  {{- end }}
  {{- $tags = append $tags (include "validate-tag" (dict "ref" $item "required" $childReqd)) }}
  {{ $key | toGoPascalCase }} {{ include "ref-type" (dict "ref" $item "required" $childReqd "tag" $key) }} `{{ $tags | join " " }}`
  {{- end }}
}
{{- else }}map[string]interface{}
{{- end }}
{{- end }}

{{ define "array-type" }}
{{- $schema := get . "schema" }}
{{- with $schema.Items }}[]{{ include "ref-type" (dict "ref" . "required" false) }}
{{- else}}interface{}
{{- end }}
{{- end }}

{{ define "string-type" }}
{{- $schema := get . "schema" }}
{{- $reqd := get . "required" }}
{{- if not $reqd }}*{{ end }}string
{{- end }}

{{ define "number-type" }}
{{- $schema := get . "schema" }}
{{- $reqd := get . "required" }}
{{- if not $reqd }}*{{ end }}float64
{{- end }}

{{ define "integer-type" }}
{{- $schema := get . "schema" }}
{{- $reqd := get . "required" }}
{{- if not $reqd }}*{{ end }}int
{{- end }}

{{ define "boolean-type" }}
{{- $schema := get . "schema" }}bool
{{- end }}

{{ define "ref-type" }}
{{- $ref := get . "ref" }}
{{- $reqd := get . "required" }}
{{- $tag := get . "tag" }}
{{- if eq $ref.Ref "" }}{{ include "schema-type" (dict "schema" $ref.Value "required" $reqd "tag" $tag) }}
{{- else }}
{{- if not $reqd }}*{{ end }}{{ splitList "/" $ref.Ref | last }}
{{- end }}
{{- end }}

{{ define "json-tag" }}
{{- $key := get . "key" }}
{{- $reqd := get . "required" }}json:"{{ $key }}{{- if not $reqd }},omitempty{{ end }}"
{{- end }}

{{ define "query-tag" }}
{{- $key := get . "key" }}query:"{{ $key }}"
{{- end }}

{{ define "validate-tag" }}
{{- $ref := get . "ref" }}
{{- $reqd := get . "required" }}validate:"{{ include "validate-ref-rule" (dict "ref" $ref "required" $reqd) }}"
{{- end }}


{{ define "validate-ref-rule" }}
{{- $ref := get . "ref" }}
{{- $reqd := get . "required" }}
{{- $rules := list }}
{{- if $reqd }}
{{- $rules = append $rules "required" }}
{{- else }}
{{- $rules = append $rules "omitempty" }}
{{- end }}
{{- with $ref.Value }}
{{- $childRules := include "validate-schema-rule" (dict "schema" $ref.Value) }}
{{- if ne $childRules "" }}
{{- $rules = append $rules $childRules }}
{{- end }}
{{- end }}{{ join "," $rules }}
{{- end }}


{{ define "validate-schema-rule" }}
{{- $schema := get . "schema" }}
{{- $rules := list }}
{{- if eq $schema.Type "string" }}
  {{- if eq $schema.Format "uuid" }}
  {{- $rules = append $rules "uuid" }}
  {{- end }}
  {{- with $schema.Enum }}
  {{- $rules = append $rules (list "oneof=" (. | join " ") | join "") }}
  {{- end }}
  {{- with $schema.MaxLength }}
  {{- $rules = append $rules (cat "max=" . | nospace) }}
  {{- end }}
  {{- with $schema.MinLength }}
  {{- $rules = append $rules (cat "min=" . | nospace) }}
  {{- end }}
{{- else if eq $schema.Type "integer" }}
  {{- with $schema.Maximum }}
  {{- $rules = append $rules (cat "lte=" . | nospace) }}
  {{- end }}
  {{- with $schema.Minimum }}
  {{- $rules = append $rules (cat "gte=" . | nospace) }}
  {{- end }}
{{- else if eq $schema.Type "array" }}
  {{- $rules = append $rules "dive" }}
  {{- $rules = append $rules (include "validate-ref-rule" (dict "ref" $schema.Items "required" false)) }}
{{- end }}{{ join "," $rules }}
{{- end }}